x-airflow-common:
  &airflow-common
  image: airflow:ca-certs
  build:
    context: .
    dockerfile: Dockerfile_Airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql+mysqldb://root:password@mysql:3306/airflow_db?charset=utf8mb4
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}

  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
    - ./etl:/opt/etl
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    mysql:
      condition: service_healthy
  networks:
    - medical-network

services:

  mysql:
    image: mysql:8.0
    container_name: mysql
    hostname: mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: airflow_db
    networks:
      - medical-network
    ports:
      - 3306:3306
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    volumes:
      - ./mysql/data/:/var/lib/mysql

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    hostname: airflow-webserver
    ports:
      - 8081:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: airflow-init
    hostname: airflow-init
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./airflow:/sources

  pyspark:
    image: pyspark-notebook:ca-certs
    build:
      context: .
      dockerfile: Dockerfile_Pyspark
    container_name: pyspark
    hostname: pyspark
    networks:
      - medical-network
    ports:
      - 8888:8888
      - 4040:4040
    volumes:
      - ./data:/data
      - ./etl:/opt/etl
      - ./etl:/home/jovyan/work
      - ./trino/trino-certs:/trino-certs

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    command: server /data --console-address ":9001"
    networks:
      - medical-network
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ./minio/data:/data
      - ./minio/minio-certs/private.key:/root/.minio/certs/private.key
      - ./minio/minio-certs/public.crt:/root/.minio/certs/public.crt
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    extra_hosts:
      - minio:127.0.0.1

  trino:
    image: trino:ca-certs
    build:
      context: .
      dockerfile: Dockerfile_Trino
    container_name: trino
    hostname: trino
    networks:
      - medical-network
    ports:
      - 8443:8443
    extra_hosts: 
      - "host.docker.internal:host-gateway"
    volumes:
      - ./trino/trino-certs:/etc/trino/certs
      - ./trino/catalog/delta_lake.properties:/etc/trino/catalog/delta_lake.properties
      - ./trino/catalog/clickhouse.properties:/etc/trino/catalog/clickhouse.properties
      - ./trino/config.properties:/etc/trino/config.properties
      - ./trino/spooling-manager.properties:/etc/trino/spooling-manager.properties

  metastore:
    image: apache/hive:3.1.3
    build:
      context: .
      dockerfile: Dockerfile_Metastore
    container_name: metastore
    hostname: metastore
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      IS_RESUME: "true"
      DB_DRIVER: "mysql"
      SERVICE_NAME: "metastore"
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=com.mysql.jdbc.Driver 
                      -Djavax.jdo.option.ConnectionURL=jdbc:mysql://mysql:3306/metastore_db?createDatabaseIfNotExist=true 
                      -Djavax.jdo.option.ConnectionUserName=root 
                      -Djavax.jdo.option.ConnectionPassword=password"
    networks:
      - medical-network
    ports:
      - 9083:9083
    volumes:
      - ./hive/warehouse:/opt/hive/data/warehouse
      - ./hive/hive-lib/mysql-connector-java-8.0.30.jar:/opt/hive/lib/mysql.jar

  spark-master:
    image: customed-spark:3.5.3
    container_name: spark-master
    hostname: spark-master
    environment:
      - SPARK_MODE=master
    volumes:
      - ./src:/opt/spark-apps
    ports:
      - 8080:8080
      - 7077:7077
    networks:
      - medical-network

  spark-worker:
    image: customed-spark:3.5.3
    container_name: spark-worker
    hostname: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    volumes:
      - ./src:/opt/spark-apps
    depends_on:
      - spark-master
    networks:
      - medical-network

  clickhouse:
    image: clickhouse:ca-certs
    container_name: clickhouse
    hostname: clickhouse
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - medical-network
    ports:
      - 8123:8123
    volumes:
      - clickhouse-data:/bitnami/clickhouse


  # lakefs:
  #   image: treeverse/lakefs:latest
  #   container_name: lakefs
  #   networks:
  #     - medical-network
  #   ports:
  #     - 8000:8000
  #   depends_on:
  #     - minio
  #   environment:
  #     - LAKEFS_BLOCKSTORE_TYPE=s3
  #     - LAKEFS_BLOCKSTORE_S3_FORCE_PATH_STYLE=true
  #     - LAKEFS_BLOCKSTORE_S3_ENDPOINT=http://minio:9000/
  #     - LAKEFS_BLOCKSTORE_S3_DISCOVER_BUCKET_REGION=false
  #     - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_ACCESS_KEY_ID=admin
  #     - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_SECRET_ACCESS_KEY=password
  #   command: run --local-settings

volumes:
  clickhouse-data:
    external: true

networks:
  medical-network:
    external: true